#include <bits/stdc++.h>
using namespace std;

long long merge_count(vector<int>& a, vector<int>& tmp, int l, int m, int r){
    int i=l, j=m, k=l; long long inv=0;
    while(i<m && j<r){
        if(a[i] <= a[j]) tmp[k++]=a[i++];
        else { tmp[k++]=a[j++]; inv += (m - i); }
    }
    while(i<m) tmp[k++]=a[i++];
    while(j<r) tmp[k++]=a[j++];
    for(int t=l;t<r;++t) a[t]=tmp[t];
    return inv;
}

long long solve(vector<int>& a, vector<int>& tmp, int l, int r){
    if(r-l<=1) return 0;
    int m=(l+r)/2;
    long long inv=0;
    inv += solve(a,tmp,l,m);
    inv += solve(a,tmp,m,r);
    inv += merge_count(a,tmp,l,m,r);
    return inv;
}

int main(){
    vector<int> a = {2, 4, 1, 3, 5};
    vector<int> tmp(a.size());
    cout<<"Inversions = "<<solve(a,tmp,0,(int)a.size())<<"\n"; // 3
}
